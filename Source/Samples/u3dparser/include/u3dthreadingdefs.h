//***************************************************************************
//
//  Copyright (c) 1999 - 2006 Intel Corporation
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//***************************************************************************
//

#ifndef __u3dthreadingdefs_h__
#define __u3dthreadingdefs_h__

#include "u3ddefs.h"

#ifdef __cplusplus
extern "C" {
#endif

/*
 * U3dThreadManager, U3dThread, U3dEvent, U3dSemaphore, U3dMutex - user defined
 *      data types.
 * Purpose
 *      Pointers to these data types are used to manipulate with user defined
 *      data and objects in Intel(r) U3D threading API.
 */
typedef void U3dThreadManager;
typedef void U3dThread;
typedef void U3dEvent;
typedef void U3dSemaphore;
typedef void U3dMutex;

/*----------------------------------------------------------------------------*/
/*create and close threads*/
/*
 * U3dCb_ThreadFunction - callback function pointer.
 * Purpose
 *      The function is used in creation of a new thread. After a thread is
 *      created, the control is passed to this function.
 * Parameters
 *  (in)pData - the pointer to the user defined data
 */
typedef void (U3D_CDECL *U3dCb_ThreadFunction)(void* const pData);

/*
 * U3dCb_BeginThread - callback function pointer.
 * Purpose
 *      The function creates a new thread.
 * Parameters
 *  (in)pCtx - the pointer to user defined data for a thread manager. This is
 *      the pointer which is passed to the parser in the U3dThreading structure.
 *  (in)Callback - the pointer to the thread callback function.
 *  (in)pData - the pointer to the data that must be passed to the Callback as
 *              input argument.
 * Return
 *      Pointer to the created thread if operation is successful.
 *      Null pointer in case of an error.
 * Notes
 *      The function must start Callback function execution in a new thread.
 */
typedef U3dThread* (U3D_CDECL *U3dCb_BeginThread)(
    U3dThreadManager *pCtx,
    U3dCb_ThreadFunction const Callback,
    void* pData);

/*
 * U3dCb_EndThread - callback function pointer.
 * Purpose
 *      The function terminates an existing thread.
 * Parameters
 *  (in)pCtx - the pointer to user defined data for a thread manager. This is
 *      the pointer which is passed to the parser in the U3dThreading structure.
 *  (in)pThread - the pointer to the thread to be terminated.
 * Notes
 *      The pointer to the thread is always taken from U3dCb_BeginThread return.
 */
typedef void (U3D_CDECL *U3dCb_EndThread)(
    U3dThreadManager *pCtx,
	U3dThread* pThread);

/*----------------------------------------------------------------------------*/
/*events*/
/*
 * U3dCb_CreateEvent - callback function pointer.
 * Purpose
 *      The function creates events.
 * Parameters
 *  (in)pCtx - the pointer to user defined data for a thread manager. This is
 *            the pointer which is passed to the parser in the U3dThreading
 *            structure.
 *  (in)ManualReset - parameter that defines whether manual-reset (TRUE) or
 *            auto-reset (FALSE) event will be generated by this function.
 *  (in)InitialState - event initial state.
 * Return
 *      The pointer to the created event if operation is successful.
 *      Null pointer in case of an error.
 * Notes
 *      This function can create two types of objects: auto and manual-reset
 *      events. When the manual-reset event object is created, it requires use
 *      of the U3dCb_ResetEvent() function to set the state to nonsignalled
 *      after one of the wait functions returned. For auto-reset event object
 *      system automatically performs the state reset to nonsignalled.
 *      True value of the InitialState means signalled state of the event.
 */
typedef U3dEvent* (U3D_CDECL *U3dCb_CreateEvent)(
    U3dThreadManager *pCtx,
    U8 ManualReset,
    U8 InitialState);

/*
 * U3dCb_DeleteEvent - callback function pointer.
 * Purpose
 *      The function deletes events.
 * Parameters
 *  (in)pCtx - the pointer to user defined data for a thread manager. This is
 *            the pointer which is passed to the parser in the U3dThreading
 *            structure.
 *  (in)pEvent - the pointer to the event to delete.
 */
typedef void (U3D_CDECL *U3dCb_DeleteEvent)(
    U3dThreadManager *pCtx,
    U3dEvent *pEvent);

/*
 * U3dCb_ResetEvent - callback function pointer.
 * Purpose
 *      The function resets event state (sets nonsignalled state).
 * Parameters
 *  (in)pCtx - the pointer to user defined data for a thread manager. This is
 *            the pointer which is passed to the parser in the U3dThreading
 *            structure.
 *  (in)pEvent - the pointer to the event to reset.
 * Return
 *      Zero if operation is successful.
 *      Non-zero in case of an error.
 */
typedef int (U3D_CDECL *U3dCb_ResetEvent)(
    U3dThreadManager *pCtx,
    U3dEvent *pEvent);

/*
 * U3dCb_SetEvent - callback function pointer.
 * Purpose
 *      The function sets event signaled state.
 * Parameters
 *  (in)pCtx - the pointer to user defined data for a thread manager. This is
 *            the pointer which is passed to the parser in the U3dThreading
 *            structure.
 *  (in)pEvent - the pointer to the event to reset.
 * Return
 *      Zero if operation is successful.
 *      Non-zero in case of an error.
 */
typedef int (U3D_CDECL *U3dCb_SetEvent)(
    U3dThreadManager *pCtx,
    U3dEvent *pEvent);

/*
 * U3dCb_WaitEvent - callback function pointer.
 * Purpose
 *      The function pauses current thread and waits until the event is set to
 *      signalled state.
 * Parameters
 *  (in)pCtx - the pointer to user defined data for a thread manager. This is
 *            the pointer which is passed to the parser in the U3dThreading
 *            structure.
 *  (in)pEvent - the pointer to the event to wait.
 * Return
 *      Zero if operation is successful.
 *      Non-zero in case of an error.
 */
typedef int (U3D_CDECL *U3dCb_WaitEvent)(
    U3dThreadManager *pCtx,
    U3dEvent *pEvent);

/*
 * U3dCb_WaitEventOrTime - callback function pointer.
 * Purpose
 *      The function pauses current thread and waits until either the event is
 *      set to signalled state or timeout has happened.
 * Parameters
 *  (in)pCtx - the pointer to user defined data for a thread manager. This is
 *            the pointer which is passed to the parser in the U3dThreading
 *            structure.
 *  (in)pEvent - the pointer to the event to wait.
 *  (in)Milliseconds - time to wait in milliseconds.
 * Return
 *      Zero if operation is successful and the event is in signalled state.
 *      1 - if timeout has happened.
 *      Other value in case of an error.
 */
typedef int (U3D_CDECL *U3dCb_WaitEventOrTime)(
    U3dThreadManager *pCtx,    
    U3dEvent *pEvent,
    U32 Milliseconds);

/*----------------------------------------------------------------------------*/
/*semaphores*/
/*
 * U3dCb_CreateSemaphore - callback function pointer.
 * Purpose
 *      The function creates a semaphore.
 * Parameters
 *  (in)pCtx - the pointer to user defined data for a thread manager. This is
 *            the pointer which is passed to the parser in the U3dThreading
 *            structure.
 *  (in)InitialCount - the semaphore initial count.
 *  (in)MaximumCount - maximum value for the semaphore count.
 * Return
 *      The pointer to the new semaphore, if operation is successful.
 *      Null pointer in case of an error.
 */
typedef U3dSemaphore* (U3D_CDECL *U3dCb_CreateSemaphore)(
    U3dThreadManager *pCtx,
    U32 InitialCount,
    U32 MaximumCount);

/*
 * U3dCb_DeleteSemaphore - callback function pointer.
 * Purpose
 *      The function deletes a semaphore.
 * Parameters
 *  (in)pCtx - the pointer to user defined data for a thread manager. This is
 *            the pointer which is passed to the parser in the U3dThreading
 *            structure.
 *  (in)pSemaphore - the pointer to the semaphore to delete.
 */
typedef void (U3D_CDECL *U3dCb_DeleteSemaphore)(
    U3dThreadManager *pCtx,
    U3dSemaphore *pSemaphore);

/*
 * U3dCb_WaitSemaphore - callback function pointer.
 * Purpose
 *      The function pauses current thread and waits for signalled state of the
 *      semaphore.
 * Parameters
 *  (in)pCtx - the pointer to user defined data for a thread manager. This is
 *            the pointer which is passed to the parser in the U3dThreading
 *            structure.
 *  (in)pSemaphore - the pointer to the semaphore to wait.
 * Return
 *      Zero if operation is successful.
 *      Non-zero in case of an error.
 * Notes
 *      Signalled state of the semaphore is when its count is above zero.
 *      Successful operation decrements semaphore count.
 */
typedef int (U3D_CDECL *U3dCb_WaitSemaphore)(
    U3dThreadManager *pCtx,
    U3dSemaphore *pSemaphore);

/*
 * U3dCb_WaitSemaphoreOrTime - callback function pointer.
 * Purpose
 *      The function pauses current thread and waits until either the semaphore
 *      is signalled or timeout has happened.
 * Parameters
 *  (in)pCtx - the pointer to user defined data for a thread manager. This is
 *            the pointer which is passed to the parser in the U3dThreading
 *            structure.
 *  (in)pSemaphore - the pointer to the semaphore to wait.
 *  (in)Milliseconds - time to wait in milliseconds.
 * Return
 *      Zero if operation is successful and the semaphore was signalled.
 *      1 - if timeout has happened.
 *      Other value in case of an error.
 * Notes
 *      Signalled state of the semaphore is when its count is above zero.
 *      Successful operation decrements semaphore count.
 */
typedef int (U3D_CDECL *U3dCb_WaitSemaphoreOrTime)(
    U3dThreadManager *pCtx,
    U3dSemaphore *pSemaphore,
    U32 Milliseconds);

/*
 * U3dCb_IncreaseSemaphoreCount - callback function pointer.
 * Purpose
 *      The function increases semaphore count (releases semaphore).
 * Parameters
 *  (in)pCtx - the pointer to user defined data for a thread manager. This is
 *            the pointer which is passed to the parser in the U3dThreading
 *            structure.
 *  (in)pSemaphore - the pointer to the semaphore.
 *  (in)IncreaseCount - value which the semaphore count must be increased by.
 *  (in)pPreviousCount - the pointer to the variable to store previous
 *            semaphore count.
 * Return
 *      Zero if operation is successful.
 *      Non-zero in case of an error.
 */
typedef int (U3D_CDECL *U3dCb_IncreaseSemaphoreCount)(
    U3dThreadManager *pCtx,
    U3dSemaphore *pSemaphore,
    U32 IncreaseCount,
    U32 *pPreviousCount);

/*----------------------------------------------------------------------------*/
/*mutex*/
/*
 * U3dCb_CreateMutex - callback function pointer.
 * Purpose
 *      The function creates a mutex.
 * Parameters
 *  (in)pCtx - the pointer to user defined data for a thread manager. This is
 *            the pointer which is passed to the parser in the U3dThreading
 *            structure.
 * Return
 *      The pointer to the new semaphore, if operation is successful.
 *      Null pointer in case of an error.
 */
typedef U3dMutex* (U3D_CDECL *U3dCb_CreateMutex)(
    U3dThreadManager *pCtx);

/*
 * U3dCb_DeleteMutex - callback function pointer.
 * Purpose
 *      The function deletes a mutex.
 * Parameters
 *  (in)pCtx - the pointer to user defined data for a thread manager. This is
 *            the pointer which is passed to the parser in the U3dThreading
 *            structure.
 *  (in)pMutex - the pointer to the mutex to delete.
 */
typedef void (U3D_CDECL *U3dCb_DeleteMutex)(
    U3dThreadManager *pCtx,
    U3dMutex *pMutex);

/*
 * U3dCb_LockMutex - callback function pointer.
 * Purpose
 *      The function locks a mutex. If the mutex is already locked, it pauses
 *      the thread and wait until the mutex is unlocked.
 * Parameters
 *  (in)pCtx - the pointer to user defined data for a thread manager. This is
 *            the pointer which is passed to the parser in the U3dThreading
 *            structure.
 *  (in)pMutex - the pointer to the mutex to lock.
 * Return
 *      Zero if operation is successful.
 *      Non-zero in case of an error.
 */
typedef int (U3D_CDECL *U3dCb_LockMutex)(
    U3dThreadManager *pCtx,
    U3dMutex *pMutex);

/*
 * U3dCb_UnlockMutex - callback function pointer.
 * Purpose
 *      The function unlocks a mutex.
 * Parameters
 *  (in)pCtx - the pointer to user defined data for a thread manager. This is
 *            the pointer which is passed to the parser in the U3dThreading
 *            structure.
 *  (in)pMutex - the pointer to the mutex to unlock.
 * Return
 *      Zero if operation is successful.
 *      Non-zero in case of an error.
 */
typedef int (U3D_CDECL *U3dCb_UnlockMutex)(
    U3dThreadManager *pCtx,
    U3dMutex *pMutex);

/*
 * U3dCb_TryLockMutex - callback function pointer.
 * Purpose
 *      The function tries to lock a mutex. If the mutex is already locked,
 *      it returns corresponding code.
 * Parameters
 *  (in)pCtx - the pointer to user defined data for a thread manager. This is
 *            the pointer which is passed to the parser in the U3dThreading
 *            structure.
 *  (in)pMutex - the pointer to the mutex to lock.
 * Return
 *      Zero if operation is successful.
 *      Non-zero if cannot lock the mutex.
 */
typedef int (U3D_CDECL *U3dCb_TryLockMutex)(
    U3dThreadManager *pCtx,
    U3dMutex *pMutex);


/*
 * U3dThreading - public structure.
 * Purpose
 *      This structure is used to pass a user defined threading utilities
 *      to the parsers.
 */
typedef struct U3dThreading
{
    U3dThreadManager *pCtx;

    /*create and close threads*/
    U3dCb_BeginThread Begin;
    U3dCb_EndThread End;

    /*events*/
    U3dCb_CreateEvent CreateEvent;
    U3dCb_DeleteEvent DeleteEvent;
    U3dCb_ResetEvent ResetEvent;
    U3dCb_SetEvent SetEvent;
    U3dCb_WaitEvent WaitEvent;
    U3dCb_WaitEventOrTime WaitEventOrTime;

    /*semaphores*/
    U3dCb_CreateSemaphore CreateSemaphore;
    U3dCb_DeleteSemaphore DeleteSemaphore;
    U3dCb_WaitSemaphore WaitSemaphore;
    U3dCb_WaitSemaphoreOrTime WaitSemaphoreOrTime;
    U3dCb_IncreaseSemaphoreCount IncreaseSemaphoreCount;

    /*mutex*/
    U3dCb_CreateMutex CreateMutex;
    U3dCb_DeleteMutex DeleteMutex;
    U3dCb_LockMutex LockMutex;
    U3dCb_UnlockMutex UnlockMutex;
    U3dCb_TryLockMutex TryLockMutex;
} U3dThreading;

#ifdef __cplusplus
}
#endif

#endif /*__u3dthreading_h__*/
/* End of file u3dthreadingdefs.h */
