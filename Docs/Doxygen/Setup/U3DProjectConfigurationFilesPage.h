//***************************************************************************
//
//  Copyright (c) 1999 - 2006 Intel Corporation
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//***************************************************************************

/**
  @file U3DProjectConfigurationFilesPage.h

      This header is used solely to contain the doxygen commands for
      the Project Configuration Files documentation page.
*/


#ifndef U3DProjectConfigurationFilesPage_H
#define U3DProjectConfigurationFilesPage_H


//***************************************************************************
//  Doxygen pages
//***************************************************************************


//---------------------------------------------------------------------------
/**
  @page PageProjectConfigurationFiles Project Configuration Files

  The various U3D Sample Software compiled binary files, provided in the
  @c Bin directory, can be generated by using the provided build system as
  described and used in the @ref PageBuildProcedure "Build Procedure".

  This build system uses five different types of configuration files
  which are provided in the U3D Sample Software packages and are
  pre-configured for supported platforms.  All configuration files are
  located in the @c Source\\Config directory tree.
  - The first type has the @b @c .conf extension and contains global
    settings that are cross-platform and cross-compiler.
  - The second type has the @b @c .def extension and contains global
    settings used with all targets that are per-platform and
    per-compiler specific.  For the Win32* platform this file is called
    @c make_Win32.def.
  - The third type has the @b @c .xml extension and is what is commonly
    called a @e Project @e Configuration @e File.  It contains all of
    the specific details about a library (static or dynamic) or
    executable to be compiled, including where the source files are
    located and what other projects it may depend upon.  For the Win32*
    platform the example of such files is @c Core.xml. These files are
    located in Config\\Projects subdirectory.
  - The fourth type also has the @b @c .xml extension and is considered
    the @e Workspace file because it identifies all of the names of the
    individual Project Configuration Files to be compiled.  It can
    simply contain XML comment tags and one @c workspace tag which
    should contain the names of the desired individual Project
    Configuration Files with the root name listed only, without the
    @c .xml extension.  For the Win32* platform this file is called
    @c workspace_Win32.xml.
@note	Build system allows adding new projects to build and removing
		unneeded projects from build by user. To add project called
		<USER_PRJ> one should add file <USER_PRJ>.xml to @c Config/Projects
		directory and add line <USER_PRJ> to workspace_<OS>.xml files,
		where <OS> is each of operating systems the new project is
		intended to work on. To remove project called <U3D_PRJ> from build
		one should remove file <U3D_PRJ>.xml from @c Config/Projects
		directory and remove line <U3D_PRJ> from workspace_<OS>.xml files,
		where <OS> is each of operating systems the project used to
		to work on.
  - The fifth type has no extension and contains project settings that can
    vary when using different platforms and/or compilers. These files are
    located in Config\\Options subdirectory and are included in Project
    Configuration Files as external entities. For example, entities
    CompileDebug and CompileRelease are included in most project settings.


  The rest of this page describes additional details about configuration
  file formats.

  <hr noshade>
  @section SectionCommentedXMLTemplate  Commented XML Template
  Here are the typical contents of the per-project XML configuration
  file.  The bulleted comments should be considered informative text
  only and not be present in these files.

  @c \<project_description\>

  @c \<project_name\>
    - List the project name.  It must coincide with this XML file name.
      For example,
      @verbatim
Rendering @endverbatim

  @c \</project_name\>

  @c \<output_name>
    - List the target name of the output file to be created (*.lib,
      *.dll, *.exe, etc.). Packaged version supports three types of output
      files. Static library (*.lib for Win32* and *.a for Linux) must be
      represented with the keyword @c \$(SLIB). For example,
      @verbatim
IFXCommon.$(SLIB)  @endverbatim
      Dynamically linked library (*.dll for Win32* and *.so for Linux) must
      be represented with the keyword @c \$(DLIB). Executable file (*.exe for
      Win32* and *.out for Linux) must be represented with the keyword
      @c \$(EXEC). The keywords @c SLIB, @c DLIB and @c EXEC are defined in
      configuration files make_*.def.

  @c \</output_name\>

  @c \<source_dir\>
    - Identifies where a project's source files can be located.  First
      line must contain a directory path that is relative to the
      U3D_SOURCE environment variable and be terminated with a
      trailing forward slash that contains files to be compiled.
      Subsequent lines can contain additional individual source code
      file names with a path that must be relative to the path defined
      in the first line of this command.  For example,
      @verbatim
RTL/Component/Rendering/
../../Platform/IFXRendering/Win32/IFXRenderingDllMain.cpp
../../Platform/IFXRendering/Win32/IFXRendering.rc @endverbatim

  @c \</source_dir\>

  @c \<source_exclude_files\>
    - List all of the individual source code files which should not be
      included during compilation relative to the source code path
      identified in the @c \<source_dir\> command.  Here is an example:
      @verbatim
IFXOSIPP.cpp  @endverbatim

  @c \</source_exclude_files\>

  @c \<include_dirs\>
    - List all of the additional include directories that the source
      code to be compiled depends upon.  These paths should be
      relative to the source code path identified in the
      @c \<source_dir\> command, and must not include a trailing
      forward slash.  For example,
      @verbatim
../Include
../../Kernel/Include
../../Platform/Include
../../Dependencies/OpenGL/Include @endverbatim

  @c \</include_dirs\>

  @c \<dependencies\>
    - List the root .xml file name for all of the projects that this
      project depends upon.  For example,
      @verbatim
Core
CorePluginStatic
Octree
RenderingDX7
RenderingDX8
RenderingNULL
RenderingOpenGL
RenderingStatic @endverbatim

  @c \</dependencies\>

  @c \<options \c cfg="ConfigName"\>
    - Specify additional options for the build @c ConfigName type
      which is identified by the @c cfg attribute (packaged version
      contains @c "Debug" and @c "Release").  Additional options can be
      specified for the compiler and the linker. Linker options can be
      either link flags or additional libraries that are included on the
      linking step. All the options must be represented as a set of
      external entities physically located in the Options directory. For
      example with @c cfg="Release" options for IFXRendering are as
      following, \n
      @verbatim
&CompileDebugWithMSExt;
&LinkDebug;
&AddLibStd; @endverbatim

  In this example there are four external entities which are included in
  project settings. One of them provides compilation settings with
  Microsoft* languae extensions, the second enables debug information for
  the linker, and the last provides information about external static
  libraries to be linked with current binary.

  @c \</options\>

  @c \<vs7name\>
    - Name used for the Microsoft* Visual Studio* .Net* project if
      @c vs7_convert.bat is used to generate compatible solution and
      project files. This setting is Windows*-specific. For example,
      @verbatim
Rendering @endverbatim

  @c \</vs7name\>

  @c \</project_description\>

  @note Comments are not allowed inside XML commands.  Comments can
      only be used to comment out an entire XML command, including
      both the start of the tag and the end of the tag.

  <hr noshade>
  @section SectionXMLCommandAttributeSyntax XML Command Attribute Syntax Requirements
  For each XML command, here is a description of what symbols are allowed
  in their associated attributes:
  - @e @c project_name - Latin letters and underscores only.
  - @e @c output_name - Latin letters, underscores and one point.
  - @e @c source_dir - Latin letters, underscores, slashes, points.
  - @e @c export - Latin letters, underscores, slashes, points.
  - @e @c source_exclude_files - Latin letters, underscores, slashes,
    points.
  - @e @c include_dirs - Latin letters, underscores, slashes, points.
  - @e @c dependencies - Latin letters and underscores only.
  - @e @c options - Latin letters, underscores, equal signs, points,
    slashes, hyphens (for Lin32 compiler options), spaces, colons and
    inverted commas.
  - @e @c vs7name - Latin letters and underscores only.

  @note The line that contains the XML tag must not contain any symbols
      after the tag.

  Project configuration files can also contain links to the settings
  specified in files @c make_*.def and @c u3d.conf. These files consist of lines
  which have the following format: @c \<STRING1\> @c = @c \<STRING2\>. For example,
      @verbatim
U3D_OUTPUT = Build/U3D @endverbatim

  Below is the example usage of such settings:
      @verbatim
RTL/Platform/$(U3D_PLATFORM)/Common/ @endverbatim

  This technique is used in \<output_name\> section of Project
  Configuration File format.

  <hr noshade>
  @section External Entities Format and Linkage

  External entities must comply to XML 1.0 format. For example,
  @verbatim
<?xml version="1.0" encoding="windows-1252" ?>
<cl>
/MTd /Za /Zi /Od /D DEBUG /D _DEBUG
</cl>
<gcc>
-Wall -fPIC -DPIC -g -DDEBUG -D_DEBUG
</gcc> @endverbatim

  This entity is called CompileDebug and it defines compiler options for
  debug compilations for two compilers: cl and gcc. Settings for each
  compiler must be contained in the corresponding compiler tag.
  Platform-dependant compiler settings must be contained in
  @c \<\$(COMPILER)_\$(U3D_PLATFORM)\> tags, i.e. the first part of the
  name should be @c \$(COMPILER) setting which must be defined in @c
  make_*.def, and the second part should be @c \$(U3D_PLATFORM) which must
  be defined in @c u3d.conf file.
  @verbatim
<?xml version="1.0" encoding="windows-1252" ?>
<icl_Win32>
/D DEBUG /D _DEBUG
</icl_Win32> @endverbatim

  This entity defines Intel compiler settings for Win32* platform.

  The linkage of such entities is described above in @c \<options\>
  section of Project Configuration File description.

  <hr noshade>
  @section SectionRelatedInformation  Related Information
  - @ref PageBuildProcedure "Build Procedure"
*/


#endif
