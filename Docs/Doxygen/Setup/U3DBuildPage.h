//***************************************************************************
//
//  Copyright (c) 1999 - 2006 Intel Corporation
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//***************************************************************************

/**
	@file	U3DBuildPage.h

			This header is used solely to contain the doxygen commands for 
			the Build documentation page.
*/


#ifndef U3DBuildPage_H
#define U3DBuildPage_H


//***************************************************************************
//	Doxygen pages
//***************************************************************************


//---------------------------------------------------------------------------
/**
	@page	PageBuildProcedure	Build Procedure

	The U3D Sample Software can be built in two ways, either by using an IDE 
	or fully automated by using the Bash command-line shell.

	<hr noshade>
	@section SectionVisualStudio	Microsoft* Visual Studio* .NET* 2003 IDE
	To enable usage of the Microsoft* Visual Studio* .NET* 2003 IDE, solution 
	and project files can be generated by performing the following 
	instructions:

	-#	Make sure that your @c INCLUDE, @c LIB and @c PATH environment 
		variables are fully defined for your compiler and development 
		environment.  For Microsoft* Visual Studio* .NET* 2003, the proper 
		additional settings for these are defined by the @c VSVARS32.bat 
		batch file whose typical location is in the <code>
		C:\\Program Files\\Microsoft Visual Studio .NET 2003\\Common7\\Tools 
		</code> directory.
		-	Refer to the @c CygwinWithVisualStudioSetup.txt file for details 
			about an easy way to automate the definition of the @c INCLUDE, 
			@c LIB and @c PATH environment variables.
		-	Another tool that must also be in the path is @c uuidgen.exe.  
			The @c VSVARS32.bat batch file handles this as well.
	-#	Run Cygwin* by either using the @c Cygwin.bat or the 
		@c CygwinWithVisualStudioSetup.bat batch file located in the 
		directory where it was installed.  This is usually @c C:\\Cygwin.
	-#	After running Cygwin*, the current directory should be the 
		@c Source\\Tools\\BuildSystem directory.  If not, then use the 
		necessary @c cd change directory commands to get there.
	-#	Execute the Bash script called @c vs7_convert.bat.  This can be done 
		by typing <code>./vs7_convert.bat</code>.
	-#	Afterwards, the solution file called @c U3D.sln can be loaded from 
		the IDE and built.  It should be located in the 
		@c Source\\RTL\\Build\\All directory.
	-#	To build the example IDTF exporter plug-in for Discreet* 3ds max* 7 
		and the related setup steps were completed, a stand-alone 
		@c Exporter.sln solution file can be loaded and built.  It is 
		located in the @c Source\\Samples\\IntermediateFormat\\Make 
		directory.  Alternatively, the associated @c Exporter.vcproj project 
		file can be manually added to the main U3D solution.

	<hr noshade>
	@section SectionCommandLine	Bash Command-Line Shell
	To perform a Bash command-line shell based fully automated build 
	perform the following instructions:

	-#	Make sure that your @c INCLUDE, @c LIB and @c PATH environment 
		variables are fully defined for your compiler and development 
		environment.  For Microsoft* Visual Studio* .NET* 2003, the proper 
		additional settings for these are defined by the @c VSVARS32.bat 
		batch file whose typical location is in the <code>
		C:\\Program Files\\Microsoft Visual Studio .NET 2003\\Common7\\Tools 
		</code> directory.
		-	Refer to the @c CygwinWithVisualStudioSetup.txt file for details 
			about an easy way to automate the definition of the @c INCLUDE, 
			@c LIB and @c PATH environment variables.
		-	Another tool that must also be in the path is @c uuidgen.exe.  
			The @c VSVARS32.bat batch file handles this as well.
	-#	Run Cygwin* by either using the @c Cygwin.bat or the 
		@c CygwinWithVisualStudioSetup.bat batch file located in the 
		directory where it was installed.  This is usually @c C:\\Cygwin.
	-#	Execute the Bash script called @c build.bat and specify the desired 
		build system commands.  This can be done by typing 
		<code>./build.sh</code> followed by @c debug or @c release to 
		compile either the debug or release build respectively.

	The @e basic build system options, of which only one can be specified, 
	include:
	-	<code>debug [XML project name prefix]</code> - Generate debug build 
		for the specified project or all default projects.  Default.
	-	<code>release [XML project name prefix]</code> - Generate release 
		build for the specified project or all default projects.
	-	<code>clean [XML project name prefix] [debug|release]</code> - 
		Clean intermediate and output files for the specified project or all 
		default projects, for only the specified build or all builds.

	The @e additional build system options, of which multiple may be 
	specified, include:
	-	@c --verbose - Generate detailed output that contains all 
		compile-time and link-time info.
	-	@c --log @c filename - Saves output to a text file of the specified 
		name called @c filename.

	The Bash command-line shell based build will not build the HelloWorld sample
	application or the Glyph 2d modifier example that uses TrueType fonts.  
	It is necessary to use the Microsoft* Visual Studio* .NET* 2003 based build 
	to create them.
	
	<hr noshade>
	@section SectionGeneratedFiles	Generated Files
	The target binary files generated by the Microsoft* Visual Studio* .NET* 
	2003 IDE are located in various subdirectories of 
	@c Source\\RTL\\Build\\All.  Those generated by the Bash command-line build 
	system are located in various subdirectories of 
	@c Source\\RTL\\Build (not including the @c All subdirectory).

	Whenever a new target binary file is regenerated, it is also copied to a 
	common execution directory @c Source\\U3D.  The @c Bin SDK-like directory 
	contains a duplicate of the target binary files.  @e Beware, all types 
	of builds overwrite the target binary files in this area.

	A list of the current target binary files for the Win32* platform are 
	provided in the @ref PageSoftwareContents "Software Contents" section.

	@note	If recompiling the software, it is currently necessary to place 
			the unzipped package in a directory with a path that contains no 
			SPACE characters.  For example, @c C:\\Software\\U3D is a 
			compatible path while <code>
			C:\\Documents and Settings\\jdoe\\My Documents\\U3D </code> is not 
			and results in build system failures.

	<hr noshade>
	@section SectionNextStep	Next Step
	Proceed to @ref PageUsage "Usage".
*/


#endif


